#include <bits/stdc++.h>
using namespace std;
struct Node {
    int data;
    Node* next;
    Node(int val) {
        data = val;
        next = nullptr;
    }
};
class LinkedList {
private:
    Node* head;
    Node* merge(Node* left, Node* right) {
        if (!left) return right;
        if (!right) return left;
        if (left->data < right->data) {
            left->next = merge(left->next, right);
            return left;
        } else {
            right->next = merge(left, right->next);
            return right;
        }
    }
    void split(Node* source, Node** front, Node** back) {
        Node* fast = source->next;
        Node* slow = source;

        while (fast) {
            fast = fast->next;
            if (fast) {
                fast = fast->next;
                slow = slow->next;
            }
        }
        *front = source;
        *back = slow->next;
        slow->next = nullptr;
    }
    Node* mergeSort(Node* node) {
        if (!node || !node->next) {
            return node;
        }
        Node* front = nullptr;
        Node* back = nullptr;
        split(node, &front, &back);
        front = mergeSort(front);
        back = mergeSort(back);
        return merge(front, back);
    }
public:
    LinkedList() {
        head = nullptr;
    }
    void insertAtBeginning(int value) {
        Node* newNode = new Node(value);
        newNode->next = head;
        head = newNode;
    }
    void display() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " -> ";
            temp = temp->next;
        }
        cout << "NULL" << endl;
    }
    void sort() {
        head = mergeSort(head);
    }
};
int main() {
    LinkedList list;
    list.insertAtBeginning(30);
    list.insertAtBeginning(20);
    list.insertAtBeginning(10);
    list.insertAtBeginning(40);
    list.insertAtBeginning(50);
    cout << "Original List: ";
    list.display();
    list.sort();
    cout << "Sorted List: ";
    list.display();
    return 0;
}
